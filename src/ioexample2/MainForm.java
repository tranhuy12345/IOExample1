/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package ioexample2;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author thuhuytran
 */
public class MainForm extends javax.swing.JFrame {
    private File fileLog;
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        openLog();
        initComponents();
    }
    
    //Open file Log
    private void openLog(){
        String fileName = "C:\\Document\\baitap.log";
        this.fileLog = new File(fileName);
        if(!this.fileLog.exists()){
            try {
                this.fileLog.createNewFile();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    //Write Log
    private void writeLog(String msg){
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(this.fileLog,true);
            OutputStreamWriter osw = new OutputStreamWriter(fos,StandardCharsets.UTF_8);
            BufferedWriter bw = new BufferedWriter(osw);
            
            LocalDateTime currentDatetime = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-mm-dd HH:mm:ss");
            String time = currentDatetime.format(formatter);
            String user = "USER";
            
           
            bw.append(time+ " " + user + " " + msg);
            bw.newLine();
            bw.flush();
            bw.close();
            
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jURL = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane = new javax.swing.JTextPane();
        jDelete = new javax.swing.JButton();
        jRename = new javax.swing.JButton();
        jCopy = new javax.swing.JButton();
        jMove = new javax.swing.JButton();
        jLog = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("FILE");

        jButton1.setText("Choose");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextPane.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(jTextPane);

        jDelete.setText("Delete");
        jDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteActionPerformed(evt);
            }
        });

        jRename.setText("Rename");
        jRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRenameActionPerformed(evt);
            }
        });

        jCopy.setText("Copy");
        jCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopyActionPerformed(evt);
            }
        });

        jMove.setText("Move");
        jMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoveActionPerformed(evt);
            }
        });

        jLog.setText("Log");
        jLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLogActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLog, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jMove, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jRename, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(66, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jURL)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDelete)
                    .addComponent(jRename)
                    .addComponent(jCopy)
                    .addComponent(jMove)
                    .addComponent(jLog))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int rs = jFileChooser.showOpenDialog(this);
        if(rs == JFileChooser.APPROVE_OPTION){           
                String path = jFileChooser.getSelectedFile().getAbsolutePath();
                jURL.setText(path);
                String s = listAllFiles(path,0);
                jTextPane.setText(s);
        }
        writeLog("Mở "+jURL.getText());
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteActionPerformed
       
        int check = JOptionPane.showConfirmDialog(this,"You want to delete this?");
        if(check == JOptionPane.NO_OPTION) return;
        //Neu chon Yes
        String path = jURL.getText();       
        deleteFileInFolder(path);
        JOptionPane.showMessageDialog(this, "Delete success");
        jURL.setText("");
        jTextPane.setText("");
        writeLog("Xóa "+jURL.getText());
    }//GEN-LAST:event_jDeleteActionPerformed

    private void jRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRenameActionPerformed
        try{
           String renamedFile = JOptionPane.showInputDialog(this,"Enter new name for file:");
        if(renamedFile.trim().length() != 0){
            String path = jURL.getText();
            File myFile = new File(path);
            String newPathFile = myFile.getParent() + "\\" + renamedFile;
            File newFile = new File(newPathFile);
            myFile.renameTo(newFile);
        
            //Set lai gia tri
            jURL.setText(newPathFile);
            jTextPane.setText(listAllFiles(newPathFile,0));
            JOptionPane.showMessageDialog(this, "Rename file success");
            writeLog("Rename thành công "+ jURL.getText());
        }else{
            JOptionPane.showMessageDialog(this, "Please enter new name!!!");
            writeLog("Rename thất bại "+ jURL.getText());
        } 
        }catch(Exception ex){
            ex.printStackTrace();
        }
        
        
    }//GEN-LAST:event_jRenameActionPerformed

    private void jMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoveActionPerformed
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int rs = jFileChooser.showOpenDialog(this);
        if(rs == JFileChooser.APPROVE_OPTION){
            try {
                String source = jURL.getText();
                String destination = jFileChooser.getSelectedFile().getAbsolutePath();
                
                Path sourcePath = Path.of(source);
                Path desPath = Path.of(destination);
                Files.move(sourcePath,desPath,StandardCopyOption.REPLACE_EXISTING);
                JOptionPane.showMessageDialog(this, "Move successfull");
            } catch (IOException ex) {
                writeLog(ex.getMessage());
            }
        }
    }//GEN-LAST:event_jMoveActionPerformed

    private void jCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopyActionPerformed
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int rs = jFileChooser.showOpenDialog(this);
        if(rs == JFileChooser.APPROVE_OPTION){
            String source = jURL.getText();
            String destination = jFileChooser.getSelectedFile().getAbsolutePath();
            copyFile(source, destination);
            JOptionPane.showMessageDialog(this, "Copy successfull");
        }
    }//GEN-LAST:event_jCopyActionPerformed

    private void jLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLogActionPerformed
        try{
            FileInputStream fis = new FileInputStream(this.fileLog);
            InputStreamReader isr = new InputStreamReader(fis,StandardCharsets.UTF_8);
            BufferedReader br = new BufferedReader(isr);
            String result = "";
            String line = "";
            while((line=br.readLine())!= null){
                result+=line;
                result+="\n";
            }
            jTextPane.setText(result);
        }catch(Exception ex){
            writeLog(ex.getMessage());
        }
        
        
    }//GEN-LAST:event_jLogActionPerformed
    private String listAllFiles(String path,int level) {
        File myFile = new File(path);
        if(!myFile.exists()) return ""; //Kiem tra co ton tai khong
        String result = "";
        for (int i = 0; i < level; i++) {
            result+="\t";
        }
        result+=myFile.getName()+"\n";
        if(myFile.isFile()) return result; //Kiem tra la FIle
        
       
        for (File file : myFile.listFiles()) {
            result+=listAllFiles(file.getAbsolutePath(),level+1);
        }
        return result;
        
        
    }
    private void deleteFileInFolder(String path) {
        try{
            File myFile = new File(path);
            if(myFile.isDirectory()){
                for (File file : myFile.listFiles()) {
                    deleteFileInFolder(file.getAbsolutePath());
                }
            }       
           myFile.delete();
        }catch(Exception ex){
            ex.printStackTrace();
        }        
    }
    private void copyFile(String source, String destination){
        try{
            File myFile = new File(source);
            Path sourcePath = Path.of(source);
            Path desPath = Path.of(destination);
            Files.copy(sourcePath,desPath.resolve(sourcePath.getFileName()),StandardCopyOption.COPY_ATTRIBUTES);
            if(myFile.isDirectory()){
                for (File file : myFile.listFiles()) {
                    copyFile(file.getAbsolutePath(),desPath.resolve(sourcePath.getFileName()).toString());
                }
            }
        }catch(IOException ex){
            
        }
}
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try{
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }catch(Exception ex){
            ex.printStackTrace();
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jCopy;
    private javax.swing.JButton jDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jLog;
    private javax.swing.JButton jMove;
    private javax.swing.JButton jRename;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane;
    private javax.swing.JTextField jURL;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    

}
